# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  node-cypress:
    docker:
      - image: "cypress/included:8.7.0"

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5
  cypress: cypress-io/cypress@2.1.0

jobs:
  # Below is the definition of your job to test your Node app. You can rename and customize it as you want.
  static-analysis:
    # These next lines define a docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:14.20
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          pkg-manager: "yarn"
      - run:
          name: Sonar analysis
          command: yarn sonar
  unit-tests:
    # These next lines define a docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:14.20
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - run:
          name: Run unit tests
          command: yarn run test:ci
      - run:
          name: Upload Codecov report
          command: bash <(curl -s https://codecov.io/bash)
  build:
    # These next lines define a docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:14.20
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - run:
          name: Build web components library
          command: yarn dist
      - run:
          name: Clear Git changed files
          command: git checkout -- .
  storybook_web_components:
    # These next lines define a docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:14.20
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          pkg-manager: "yarn"
      - run:
          name: Build Storybook
          command: yarn storybook:dist
      - run:
          name: Deploy Storybook
          command: yarn storybook:deploy-ci
      - run:
          name: Clear Git changed files
          command: git checkout -- .       

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build:
    jobs:
      - static-analysis
      - unit-tests
      - build
      # For running simple node tests, you could optionally instead use the node/test job from the orb to replicate and replace the manually defined "test" job above in fewer lines.
      # - node/test
  daily_storybook_deploy:
    triggers:
      - schedule:
          cron: "30 5 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - storybook_web_components
